// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 0001_initial_schema.down.sql (110B)
// 0001_initial_schema.up.sql (1.333kB)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_initial_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\xcd\x2f\xcd\x2b\xb1\xe6\x42\x12\x49\xcd\x2b\xcb\x2c\xca\xcf\xcb\x4d\xcd\x2b\x89\x2f\x4b\xcc\x29\x4d\x45\x95\xad\x28\xc8\x2f\x2e\x2d\x42\x15\x4c\xce\xcf\x2b\x49\xcc\xcc\x4b\x2d\x2a\x46\x11\xce\xcc\x4d\x4c\x4f\xb5\xe6\x02\x04\x00\x00\xff\xff\x1f\x01\x6f\xf6\x6e\x00\x00\x00")

func _0001_initial_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_initial_schemaDownSql,
		"0001_initial_schema.down.sql",
	)
}

func _0001_initial_schemaDownSql() (*asset, error) {
	bytes, err := _0001_initial_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_initial_schema.down.sql", size: 110, mode: os.FileMode(0644), modTime: time.Unix(1724970240, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x67, 0x8c, 0xec, 0xde, 0xf2, 0xb9, 0xe6, 0xa1, 0x29, 0x9b, 0xc7, 0xf0, 0xd9, 0x2d, 0x57, 0x20, 0xd, 0x3e, 0xd0, 0x30, 0x64, 0x33, 0xbd, 0x90, 0x67, 0x7c, 0xf7, 0x36, 0xaa, 0x53, 0x5e, 0xfd}}
	return a, nil
}

var __0001_initial_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\x4d\x6e\x83\x30\x10\x85\xd7\xf6\x29\x66\x07\x48\xdc\x20\x2b\x4a\x26\x29\x0a\x35\x11\x71\xa4\x66\x85\x2c\xb0\x1a\xd4\x60\x23\x63\xa2\xf6\xf6\x55\x9a\x1f\x41\xa0\xad\x90\xaa\x6c\xdf\x8c\xdf\xcc\xfb\x3c\x61\x8a\x01\x47\xe0\xc1\x53\x8c\x50\x56\xe2\x4d\x82\x4b\x49\x59\x40\xc4\x38\x2e\x31\x85\x75\x1a\xbd\x04\xe9\x0e\x56\xb8\xf3\x29\xc9\x8d\x14\x56\x16\x99\xb0\xc0\xf1\x95\x03\x4b\x38\xb0\x6d\x1c\xfb\x94\x14\xf2\x20\x3b\x25\x9f\x92\xd6\x1c\xee\xbb\xbc\x19\xa5\xbd\x91\xb9\x56\x56\x94\x4a\x9a\xe6\xff\xe6\x7e\xc7\xc8\x3a\x5e\x9d\x6e\x25\x2a\x39\xb0\x58\x24\x29\x46\x4b\x76\x9a\x05\xee\xf5\xb5\x47\x09\x49\x71\x81\x29\xb2\x10\x37\x57\x36\x67\x9d\x24\x0c\xe6\x18\x23\x47\x08\x83\x4d\x18\xcc\xf1\x22\x6e\xd7\xf3\x53\x36\x96\x40\x10\xf2\x28\x61\x23\x89\xe5\x47\xad\x9b\xd6\xfc\xce\x59\x14\x85\x91\x4d\x33\xd8\xf4\x86\xab\x13\xaf\x27\xd7\xda\xd8\x6e\x61\x0a\xb7\xbd\x6e\xec\xbd\x41\x6d\xb4\xd5\xb9\xbe\x7c\x64\xf8\x8c\xe1\xca\x85\x9b\x18\x31\x70\x1d\x9b\xd7\x8e\x0f\x4e\x5b\xd4\x8e\xf7\x23\xd5\xee\xe2\x77\x64\xbb\x27\x30\x19\x2f\xf1\x66\x23\x88\xd5\xb1\x34\x5a\x55\x52\xd9\xec\x28\x0e\xed\x1f\x37\x3d\xc2\xb4\xc7\x7c\x0a\xc3\x77\xf9\x39\xe8\x3a\xaf\x30\xf8\xca\x29\xb6\x0f\x63\xd9\x07\x59\xe9\x56\xd9\xc7\xc1\x2b\x64\x63\x4b\x25\x6c\xa9\x55\x56\x0b\xbb\x1f\x3c\x69\x74\x6b\x72\x39\x5e\x7b\xdc\xb9\xd1\xaf\x00\x00\x00\xff\xff\xc1\x51\x3e\xcb\x35\x05\x00\x00")

func _0001_initial_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_initial_schemaUpSql,
		"0001_initial_schema.up.sql",
	)
}

func _0001_initial_schemaUpSql() (*asset, error) {
	bytes, err := _0001_initial_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_initial_schema.up.sql", size: 1333, mode: os.FileMode(0644), modTime: time.Unix(1724970119, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x97, 0x7a, 0x18, 0x65, 0xb7, 0x1d, 0x0, 0xd2, 0xb6, 0xaa, 0x2a, 0xe, 0xf9, 0x8a, 0x3, 0x6, 0xa1, 0xb2, 0x22, 0xd9, 0x14, 0x39, 0x30, 0x13, 0x8a, 0x7e, 0x27, 0xf9, 0xb5, 0x55, 0xcd, 0x56}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_initial_schema.down.sql": _0001_initial_schemaDownSql,
	"0001_initial_schema.up.sql":   _0001_initial_schemaUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0001_initial_schema.down.sql": {_0001_initial_schemaDownSql, map[string]*bintree{}},
	"0001_initial_schema.up.sql":   {_0001_initial_schemaUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
